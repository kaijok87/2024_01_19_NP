//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem/TestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInput"",
    ""maps"": [
        {
            ""name"": ""TestButton"",
            ""id"": ""24a9d054-cd2e-47df-8885-e0259f04e95c"",
            ""actions"": [
                {
                    ""name"": ""1"",
                    ""type"": ""Button"",
                    ""id"": ""4c473376-0dde-4add-b1b8-eb0aa03cb0ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""2"",
                    ""type"": ""Button"",
                    ""id"": ""fc495c05-7b34-407c-ad9f-49d5c77feb1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""3"",
                    ""type"": ""Button"",
                    ""id"": ""3603f4f6-f427-432d-b281-f99f44b07d75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""4"",
                    ""type"": ""Button"",
                    ""id"": ""e0a3e6f0-cccc-486d-b16e-dbc056cdce45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""5"",
                    ""type"": ""Button"",
                    ""id"": ""dac6819f-c380-479d-9a30-92931c5e94b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""e8ff470f-ef57-49f0-8f8a-8cdab9acb02f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""40d74170-a275-4219-9e4f-cec834d16504"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""67bc1692-7d68-41bf-ad1b-0e785130916d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25291240-4b40-484c-a811-9407eab8273f"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f260342-3f84-4249-84c5-660fe53625ea"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9299bc2d-31cb-4076-bbc1-8c0178e4ff59"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f63830b-a68b-4e00-b6c5-943334c0e4dc"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8b94086-8128-4d52-bd2c-e80b6070c68b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73336c68-db57-4abd-8597-7ca5395c8e39"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DebugInput"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DebugInput"",
            ""bindingGroup"": ""DebugInput"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TestButton
        m_TestButton = asset.FindActionMap("TestButton", throwIfNotFound: true);
        m_TestButton__1 = m_TestButton.FindAction("1", throwIfNotFound: true);
        m_TestButton__2 = m_TestButton.FindAction("2", throwIfNotFound: true);
        m_TestButton__3 = m_TestButton.FindAction("3", throwIfNotFound: true);
        m_TestButton__4 = m_TestButton.FindAction("4", throwIfNotFound: true);
        m_TestButton__5 = m_TestButton.FindAction("5", throwIfNotFound: true);
        m_TestButton_LeftClick = m_TestButton.FindAction("LeftClick", throwIfNotFound: true);
        m_TestButton_RightClick = m_TestButton.FindAction("RightClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestButton
    private readonly InputActionMap m_TestButton;
    private List<ITestButtonActions> m_TestButtonActionsCallbackInterfaces = new List<ITestButtonActions>();
    private readonly InputAction m_TestButton__1;
    private readonly InputAction m_TestButton__2;
    private readonly InputAction m_TestButton__3;
    private readonly InputAction m_TestButton__4;
    private readonly InputAction m_TestButton__5;
    private readonly InputAction m_TestButton_LeftClick;
    private readonly InputAction m_TestButton_RightClick;
    public struct TestButtonActions
    {
        private @TestInput m_Wrapper;
        public TestButtonActions(@TestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @_1 => m_Wrapper.m_TestButton__1;
        public InputAction @_2 => m_Wrapper.m_TestButton__2;
        public InputAction @_3 => m_Wrapper.m_TestButton__3;
        public InputAction @_4 => m_Wrapper.m_TestButton__4;
        public InputAction @_5 => m_Wrapper.m_TestButton__5;
        public InputAction @LeftClick => m_Wrapper.m_TestButton_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_TestButton_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_TestButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestButtonActions set) { return set.Get(); }
        public void AddCallbacks(ITestButtonActions instance)
        {
            if (instance == null || m_Wrapper.m_TestButtonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestButtonActionsCallbackInterfaces.Add(instance);
            @_1.started += instance.On_1;
            @_1.performed += instance.On_1;
            @_1.canceled += instance.On_1;
            @_2.started += instance.On_2;
            @_2.performed += instance.On_2;
            @_2.canceled += instance.On_2;
            @_3.started += instance.On_3;
            @_3.performed += instance.On_3;
            @_3.canceled += instance.On_3;
            @_4.started += instance.On_4;
            @_4.performed += instance.On_4;
            @_4.canceled += instance.On_4;
            @_5.started += instance.On_5;
            @_5.performed += instance.On_5;
            @_5.canceled += instance.On_5;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        private void UnregisterCallbacks(ITestButtonActions instance)
        {
            @_1.started -= instance.On_1;
            @_1.performed -= instance.On_1;
            @_1.canceled -= instance.On_1;
            @_2.started -= instance.On_2;
            @_2.performed -= instance.On_2;
            @_2.canceled -= instance.On_2;
            @_3.started -= instance.On_3;
            @_3.performed -= instance.On_3;
            @_3.canceled -= instance.On_3;
            @_4.started -= instance.On_4;
            @_4.performed -= instance.On_4;
            @_4.canceled -= instance.On_4;
            @_5.started -= instance.On_5;
            @_5.performed -= instance.On_5;
            @_5.canceled -= instance.On_5;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        public void RemoveCallbacks(ITestButtonActions instance)
        {
            if (m_Wrapper.m_TestButtonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestButtonActions instance)
        {
            foreach (var item in m_Wrapper.m_TestButtonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestButtonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestButtonActions @TestButton => new TestButtonActions(this);
    private int m_DebugInputSchemeIndex = -1;
    public InputControlScheme DebugInputScheme
    {
        get
        {
            if (m_DebugInputSchemeIndex == -1) m_DebugInputSchemeIndex = asset.FindControlSchemeIndex("DebugInput");
            return asset.controlSchemes[m_DebugInputSchemeIndex];
        }
    }
    public interface ITestButtonActions
    {
        void On_1(InputAction.CallbackContext context);
        void On_2(InputAction.CallbackContext context);
        void On_3(InputAction.CallbackContext context);
        void On_4(InputAction.CallbackContext context);
        void On_5(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
}
